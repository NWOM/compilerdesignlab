Q LEX PROGRAM TO DISPLAY AND COUNT TOTAL TOKENS IN A CODE SNIPPET

LEX CODE 

%{
#include <stdio.h>

int total_tokens = 0;
%}

%%

int|float|char|void    { printf("Type: %s\n", yytext); total_tokens++; }
if|else|while|for      { printf("Keyword: %s\n", yytext); total_tokens++; }
[0-9]+                  { printf("Number: %s\n", yytext); total_tokens++; }
[a-zA-Z_][a-zA-Z0-9_]*  { printf("Identifier: %s\n", yytext); total_tokens++; }
[+\-*/=<>]              { printf("Operator: %s\n", yytext); total_tokens++; }
[{}();,]                { printf("Punctuation: %s\n", yytext); total_tokens++; }
[\t\n]                  ; // Ignore whitespace and newline characters
.                       { printf("Unknown: %s\n", yytext); total_tokens++; }

%%

int main() {
    yylex();
    printf("\nTotal Tokens: %d\n", total_tokens);
    return 0;
}


input_code.c

#include <stdio.h>

int main() {
    int a = 5;
    float b = 3.14;
    for (int i = 0; i < 10; i++) {
        printf("Hello, World!\n");
    }
    return 0;
}

sagnik@linux:~/Documents/compilerDesign$ ./lexer < input_code.c
Unknown: #
Identifier: include
Unknown:  
Operator: <
Identifier: stdio
Unknown: .
Identifier: h
Operator: >
Type: int
Unknown:  
Identifier: main
Punctuation: (
Punctuation: )
Unknown:  
Punctuation: {
Unknown:  
Unknown:  
Unknown:  
Unknown:  
Type: int
Unknown:  
Identifier: a
Unknown:  
Operator: =
Unknown:  
Number: 5
Punctuation: ;
Unknown:  
Unknown:  
Unknown:  
Unknown:  
Type: float
Unknown:  
Identifier: b
Unknown:  
Operator: =
Unknown:  
Number: 3
Unknown: .
Number: 14
Punctuation: ;
Unknown:  
Unknown:  
Unknown:  
Unknown:  
Keyword: for
Unknown:  
Punctuation: (
Type: int
Unknown:  
Identifier: i
Unknown:  
Operator: =
Unknown:  
Number: 0
Punctuation: ;
Unknown:  
Identifier: i
Unknown:  
Operator: <
Unknown:  
Number: 10
Punctuation: ;
Unknown:  
Identifier: i
Operator: +
Operator: +
Punctuation: )
Unknown:  
Punctuation: {
Unknown:  
Unknown:  
Unknown:  
Unknown:  
Unknown:  
Unknown:  
Unknown:  
Unknown:  
Identifier: printf
Punctuation: (
Unknown: "
Identifier: Hello
Punctuation: ,
Unknown:  
Identifier: World
Unknown: !
Unknown: \
Identifier: n
Unknown: "
Punctuation: )
Punctuation: ;
Unknown:  
Unknown:  
Unknown:  
Unknown:  
Punctuation: }
Unknown:  
Unknown:  
Unknown:  
Unknown:  
Identifier: return
Unknown:  
Number: 0
Punctuation: ;
Punctuation: }

Total Tokens: 105

